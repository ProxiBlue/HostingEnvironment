jpsType: install
jpsVersion: '1.4'
name: Standalone Magento Environment

baseUrl: https://raw.githubusercontent.com/ProxiBlue/HostingEnvironment/main/

globals:
  DB_USER: ${fn.random}
  DB_PASS: ${fn.password(10)}
  RD_PASS: ${fn.password(10)}
  NGINX_PASS: ${fn.password(10)}
  STATS_PASS: ${fn.password(10)}
settings:
  fields:
  -  caption: Backup Email
     type: text
     required: true
     name: BACKUP_EMAIL
  -  caption: Amplify API KEY
     type: text
     required: yes
     name: AMPLIFY_KEY

skipNodeEmails: true

nodes:
- nodeType: nginxphp-dockerized
  tag: 1.18.0-php-7.4.16
  count: 1
  cloudlets: 74
  extip: 1
  links:
    - sqldb:DB
    - redis:REDIS
  nodeGroup: cp
  volumes:
    - /var/www/webroot/ROOT
    - /var/www/webroot/nfs
  displayName: AppServer
  env:
    PHPFPM_MAX_CHILDREN: 1000
    REDIS_ENABLED: 1
    REDIS_VERSION: 6.0.6
    BACKUP_FAIL_FROM: ${settings.BACKUP_EMAIL}
    BACKUP_FAIL_TO: ${settings.BACKUP_EMAIL}
    JELASTIC_PORTS:
        - 80
        - 443
        - 22

- nodeType: mariadb-dockerized
  tag: 10.3.22
  count: 1
  cloudlets: 28
  displayName: Database
  diskLimit: 200G
  nodeGroup: sqldb

- nodeType: redis
  tag: 6.0.6
  count: 1
  cloudlets: 28
  displayName: Redis for Sessions
  diskLimit: 10G
  nodeGroup: nosqldb

- nodeType: docker
  count: 1
  cloudlets: 28
  displayName: Elastic Cache
  diskLimit: 100G
  nodeGroup: es
  image: elasticsearch:7.9.3
  entrypoint: ["/usr/bin/supervisord","-c","/etc/supervisord.conf"]

onInstall:
  - log: Set Node Display Name
  - setNodeDisplayName [cp]: AppServer
  - setNodeDisplayName [sqldb]: DataBase
  - log: Create Database
  - createDb
  - setupCP
  - setupRD
  - setupES

actions:
  setupES:
  - log: Setup ES cache server
  - cmd [es]: |-
      curl https://raw.githubusercontent.com/ProxiBlue/HostingEnvironment/main/configs/es/elasticsearch.yml > /usr/share/elasticsearch/config/elasticsearch.yml
      curl https://raw.githubusercontent.com/ProxiBlue/HostingEnvironment/main/configs/es/jvm.options > /usr/share/elasticsearch/config/jvm.options
      curl https://raw.githubusercontent.com/ProxiBlue/HostingEnvironment/main/configs/es/log4j2.properties > /usr/share/elasticsearch/config/log4j2.properties
      yum install -y epel-release &>> /var/log/run.log
      yum update -y &>> /var/log/run.log
      yum install -y supervisor &>> /var/log/run.log
      systemctl enable supervisord &>> /var/log/run.log
      mkdir -p /var/log/supervisor
      mkdir -p /var/log/elasticsearch
      curl https://raw.githubusercontent.com/ProxiBlue/HostingEnvironment/main/configs/es/supervisord.conf > /etc/supervisord.conf
      /usr/share/elasticsearch/bin/elasticsearch-plugin install analysis-icu &>> /var/log/run.log
      /usr/share/elasticsearch/bin/elasticsearch-plugin install analysis-phonetic &>> /var/log/run.log
    user: root
    sayYes: true
  setupRD:
  - log: Setup Redis cache server
  - cmd [nosqldb]: |-
      curl https://raw.githubusercontent.com/ProxiBlue/HostingEnvironment/main/configs/redis/redis.conf > /etc/redis.conf
      curl https://raw.githubusercontent.com/ProxiBlue/HostingEnvironment/main/configs/restart.conf > /etc/systemd/system/redis.service.d/restart.conf &>> /var/log/run.log
      systemctl daemon-reload &>> /var/log/run.log
      systemctl restart redis &>> /var/log/run.log
    user: root
    sayYes: true
  setupCP:
  - log: Setup Crons
  - cmd [cp]: |-
      echo "0 5 * * * /bin/bash /var/www/webroot/ROOT/backup/backup_to_s3.sh media 2>&1 >/var/www/webroot/ROOT/var/log/backups.log" >> /var/spool/cron/nginx
      echo "5 8 * * 0 rm -rf /var/www/webroot/ROOT/pub/media/import/* 2>&1 >/dev/null" >> /var/spool/cron/nginx
      echo "*/5 * * * * cat /var/log/nginx/access.log | grep -v -f /var/www/webroot/ROOT/go_access_exclude_list.txt | goaccess -o /var/www/webroot/ROOT/pub/site_report.html --log-format=COMBINED -"
    user: nginx
  - log: Setup Config files
  - cmd [cp]: |-
      yum install https://dl.fedoraproject.org/pub/epel/epel-release-latest-7.noarch.rpm &>> /var/log/run.log
      yum install joe pv monit libsodium &>> /var/log/run.log
      systemctl stop monit &>> /var/log/run.log
      curl https://raw.githubusercontent.com/ProxiBlue/HostingEnvironment/main/configs/monit/nginxmonitor > /etc/monit.d/nginx
      curl https://raw.githubusercontent.com/ProxiBlue/HostingEnvironment/main/configs/monit/phpfpmmonitor > /etc/monit.d/phpfpm
      echo ${globals.NGINX_PASS}| passwd --stdin nginx &>> /var/log/run.log
      echo ${globals.NGINX_PASS}| passwd --stdin root &>> /var/log/run.log
      curl https://raw.githubusercontent.com/ProxiBlue/HostingEnvironment/main/configs/php/extensions.ini > /etc/php.d/extensions.ini
      curl https://raw.githubusercontent.com/ProxiBlue/HostingEnvironment/main/configs/nginx/nginx.conf > /etc/nginx/nginx.conf
      curl https://raw.githubusercontent.com/ProxiBlue/HostingEnvironment/main/configs/nginx/nossl.conf > /etc/nginx/conf.d/nossl.conf
      curl https://raw.githubusercontent.com/ProxiBlue/HostingEnvironment/main/configs/nginx/ssl.conf.disabled > /etc/nginx/conf.d/ssl.conf.disabled
      curl https://raw.githubusercontent.com/ProxiBlue/HostingEnvironment/main/configs/php/php-fpm.conf > /etc/php-fpm.conf
      mkdir -p /etc/nginx/conf.d/SITES_ENABLED
      curl https://raw.githubusercontent.com/ProxiBlue/HostingEnvironment/main/configs/nginx/site-default-mg2.conf > /etc/nginx/conf.d/SITES_ENABLED/site-default.conf
      mkdir -p /etc/nginx/conf.d/CORS
      curl https://raw.githubusercontent.com/ProxiBlue/HostingEnvironment/main/configs/nginx/CORS-CDN/cors.conf > /etc/nginx/conf.d/CORS/cors.conf
      curl https://raw.githubusercontent.com/ProxiBlue/HostingEnvironment/main/configs/nginx/stub_status.conf > /etc/nginx/conf.d/stub_status.conf
      curl https://raw.githubusercontent.com/ProxiBlue/HostingEnvironment/main/configs/restart.conf > /etc/systemd/system/redis.service.d/restart.conf
      systemctl daemon-reload &>> /var/log/run.log
      export REDIS_ENABLED=TRUE
      curl https://raw.githubusercontent.com/ProxiBlue/HostingEnvironment/main/configs/redis/redis.conf > /etc/redis.conf
      systemctl start redis &>> /var/log/run.log
      systemctl enable redis &>> /var/log/run.log
      systemctl restart nginx &>> /var/log/run.log
      sudo jem service restart  &>> /var/log/run.log
      echo ${nodes.sqldb.master.intIP} DB_MASTER >> /etc/hosts
      echo ${nodes.nosqldb.master.intIP} RD_MASTER >> /etc/hosts
      echo ${nodes.es.first.intIP} ES_MASTER >> /etc/hosts
      echo "export BACKUP_FAIL_FROM=${settings.BACKUP_EMAIL}" >> /etc/environment
      echo "export BACKUP_FAIL_TO=${settings.BACKUP_EMAIL}" >> /etc/environment
      systemctl enable monit &>> /var/log/run.log
      systemctl start monit &>> /var/log/run.log
      /etc/init.d/nginx restart &>> /var/log/run.log
      /etc/init.d/php-fpm restart &>> /var/log/run.log
      curl -sL https://rpm.nodesource.com/setup_12.x | sudo bash - &>> /var/log/run.log
      yum install nodejs &>> /var/log/run.log
      git clone https://github.com/ProxiBlue/baler.git &>> /var/log/run.log
      cd baler &>> /var/log/run.log
      npm install &>> /var/log/run.log
      npm run build &>> /var/log/run.log
      npm link &>> /var/log/run.log
      wget http://www.rfxn.com/downloads/maldetect-current.tar.gz
      tar -xzf maldetect-current.tar.gz
      cd maldetect-1.6.4
      /bin/bash ./install.sh
      cd ../
      rm -rf maldet*
      #rm -rf /usr/lib/node_modules/@magento/baler
      #mv /root/baler /usr/lib/node_modules/@magento/baler
      #chown root:nginx /usr/lib/node_modules/@magento/baler -R
      #chmod +x /usr/lib/node_modules/@magento/baler/bin/baler
      curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip" &>> /var/log/run.log
      unzip awscliv2.zip &>> /var/log/run.log
      ./aws/install &>> /var/log/run.log
      yum install goaccess  &>> /var/log/run.log
      curl -L -O https://github.com/nginxinc/nginx-amplify-agent/raw/master/packages/install.sh
      API_KEY='${settings.AMPLIFY_KEY}' sh ./install.sh
      yum install -y httpd-tools
      htpasswd -b -c /etc/nginx/.htpasswd stats ${globals.STATS_PASS}
    user: root
    sayYes: true
  createDb:
  - cmd [sqldb]: |-
      wget https://raw.githubusercontent.com/jelastic-jps/mysql-cluster/master/scripts/setupUser.sh -O ~/setupUser.sh &>> /var/log/run.log
      bash ~/setupUser.sh ${globals.DB_USER} ${globals.DB_PASS} &>> /var/log/run.log
      mysql -u${globals.DB_USER} -p${globals.DB_PASS} -e "CREATE DATABASE IF NOT EXISTS magento;"
      sed -i 's/Require all granted/Require all denied/g' /etc/httpd/conf.d/phpMyAdmin-jel.conf
      echo ${globals.NGINX_PASS}| passwd --stdin root &>> /var/log/run.log
    user: root
success:
  text: |
    ## Database: ${nodes.mariadb-dockerized.name}

    * **Host**: ${nodes.mariadb-dockerized.intIP} or just use: DB_MASTER
    * **Username**: ${globals.DB_USER}
    * **Password**: ${globals.DB_PASS}
    * **Database Name**: magento

    ## Redis for Sessions

    * **Host**: ${nodes.redis.intIP} or just use: RD_MASTER

    ## Redis for Cache

    * **Host**: ${nodes.cp.first.intIP} or just use: localhost on AppServer
    * **socket**: It is preferred to use the socket /tmp/redis.sock

    ## Elastic Search

    * **Host**: ${nodes.es.first.intIP} or just use: ES_MASTER

    ## AppServer Node / DB Node

    * **password**: ${globals.NGINX_PASS}

    ## STATS

    * stats / ${globals.STATS_PASS}
